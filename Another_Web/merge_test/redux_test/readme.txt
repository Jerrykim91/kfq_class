[[ 리덕스 적용 ]]

1. 목적
 - 여러 컴포넌트가 뒤섞여 있을때, 컴포넌트간 이벤트와 데이터를 어떻게 공유할것인가?
 - 제시 : flux, redux등..
 - 특징 : 데이터나 이벤트의 흐름은 단방향
   => Component -> action -> reducer -> store -> Component
 - 구성요소 : 무조건, 아래 순서대로 작성한다(중요)
   1) Component : 이벤트를 발생시키는 곳, 데이터를 사용하는 곳
   2) action    : 이벤트 정의
   3) reducer   : 이벤트별 해야할일 정의, 저장소에 저장된 형태도 정의됨
   4) store     : 데이터가 저장되는 공간
   5) Component : 이벤트가 발생되어 실제적으로 일을 하게 되는 컴포넌트
 - 적용시점
   => 멀티 컴포넌트로 화면을 배치하고 나서
   => 컴포넌트간 통신을 진행한다면 이때 적용
 - 작성순서 
   1) 컴포넌트 기본 형태 구성
   2) 해당 컴포넌트에서 발생할 이벤트 정의
   3) 해당 이벤트를 액션에서 정의
   4) 해당 액션에 대한 리듀서 정의
   5) 해당 리듀서를 컴포넌트에 연결하여 최종 마감

2. 구조
redux_test        : 프로젝트 루트
 ┗ node_modules : 모듈
 ┗ public
   ┗ index.html : 기본 한개의 페이지 (랜더링 대상 div 존재)
 ┗ src
   ┗ index.js   : 컴포넌트 랜더링 시작점, 스토어 생성, JSX 구조를 리덕스형태로 구성
                 -----------------------------------------------------------
                    <Provider store={store}>
                        <App />
                    </Provider>
                 -----------------------------------------------------------                    
   ┗ components : 
     ┗ App.js   : 기본 화면 구성, 개별 컴포넌트 포함
                 -----------------------------------------------------------   
                    <div className="App">
                        <Counter />   {/* 카운터 보이는 화면 */}
                        <Buttons />   {/* 증감 버튼 */}
                        <StepInput /> {/* 증감 수치 변경 화면 */}
                    </div>
                 ----------------------------------------------------------- 
     ┗ Counter.js : Buttons 컴포넌트에서 클릭하면 Counter 컴포넌트의 
                    this.props.counterValue값이 증가되야 한다
                    즉, 이벤트가 발생한 위치와 그 파생결과를 사용하는 위치가 다르다
                 -----------------------------------------------------------   
                    <div>
                        <h2>카운터:{this.props.counterValue}</h2>
                    </div>
                 -----------------------------------------------------------      
     ┗ Buttons.js : store에 저장된 counterReducer 리듀서의 value값을 step 단위로 증감 하는 액션발생
                컴포넌트 이벤트 발생 => 액션 발생 => 리듀서 상태 변경 => 스토어 저장 => 연결되어 있는
                컴포넌트 영향 => 화면 갱신
                 -----------------------------------------------------------   
                    <div>
                        <button onClick={ this.props.onIncrement }>증가</button>
                        <button onClick={ this.props.onDecrement }>감소</button>
                    </div>
                 -----------------------------------------------------------   
     ┗ StepInput.js : store에 저장된 리듀서 counterReducer 데이터 step 값은 
                  컴포넌트 stepValue와 연결되어 있어서 step값이 변경되면
                  stepValue도 영향받아서 변경된다
                 -----------------------------------------------------------   
                    <div style={{margin:10}}>
                        <input value={this.state.rate} onChange={ this.onStepChange }/>
                    </div>
                 -----------------------------------------------------------   

   ┗ actions
     ┗ index.js :  Buttons.js에서 발생할 증/감 이벤트에 대한 액션 정의
                   SetpInput.js에서 발생할 증감 단위 수치 변경 이벤트에 대한 액션 정의
   ┗ reducers  
     ┗ index.js :  store에 저장된 데이터 형태 및 액션에 따른 데이터 처리 부분 정의